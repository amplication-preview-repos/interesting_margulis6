/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PostStats } from "./PostStats";
import { PostStatsCountArgs } from "./PostStatsCountArgs";
import { PostStatsFindManyArgs } from "./PostStatsFindManyArgs";
import { PostStatsFindUniqueArgs } from "./PostStatsFindUniqueArgs";
import { DeletePostStatsArgs } from "./DeletePostStatsArgs";
import { PostStatsService } from "../postStats.service";
@graphql.Resolver(() => PostStats)
export class PostStatsResolverBase {
  constructor(protected readonly service: PostStatsService) {}

  async _postStatsItemsMeta(
    @graphql.Args() args: PostStatsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PostStats])
  async postStatsItems(
    @graphql.Args() args: PostStatsFindManyArgs
  ): Promise<PostStats[]> {
    return this.service.postStatsItems(args);
  }

  @graphql.Query(() => PostStats, { nullable: true })
  async postStats(
    @graphql.Args() args: PostStatsFindUniqueArgs
  ): Promise<PostStats | null> {
    const result = await this.service.postStats(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PostStats)
  async deletePostStats(
    @graphql.Args() args: DeletePostStatsArgs
  ): Promise<PostStats | null> {
    try {
      return await this.service.deletePostStats(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
