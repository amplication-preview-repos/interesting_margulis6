/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PostStatsService } from "../postStats.service";
import { PostStatsCreateInput } from "./PostStatsCreateInput";
import { PostStats } from "./PostStats";
import { PostStatsFindManyArgs } from "./PostStatsFindManyArgs";
import { PostStatsWhereUniqueInput } from "./PostStatsWhereUniqueInput";
import { PostStatsUpdateInput } from "./PostStatsUpdateInput";

export class PostStatsControllerBase {
  constructor(protected readonly service: PostStatsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PostStats })
  async createPostStats(
    @common.Body() data: PostStatsCreateInput
  ): Promise<PostStats> {
    return await this.service.createPostStats({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PostStats] })
  @ApiNestedQuery(PostStatsFindManyArgs)
  async postStatsItems(@common.Req() request: Request): Promise<PostStats[]> {
    const args = plainToClass(PostStatsFindManyArgs, request.query);
    return this.service.postStatsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PostStats })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async postStats(
    @common.Param() params: PostStatsWhereUniqueInput
  ): Promise<PostStats | null> {
    const result = await this.service.postStats({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PostStats })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePostStats(
    @common.Param() params: PostStatsWhereUniqueInput,
    @common.Body() data: PostStatsUpdateInput
  ): Promise<PostStats | null> {
    try {
      return await this.service.updatePostStats({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PostStats })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePostStats(
    @common.Param() params: PostStatsWhereUniqueInput
  ): Promise<PostStats | null> {
    try {
      return await this.service.deletePostStats({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
