/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommentStatsService } from "../commentStats.service";
import { CommentStatsCreateInput } from "./CommentStatsCreateInput";
import { CommentStats } from "./CommentStats";
import { CommentStatsFindManyArgs } from "./CommentStatsFindManyArgs";
import { CommentStatsWhereUniqueInput } from "./CommentStatsWhereUniqueInput";
import { CommentStatsUpdateInput } from "./CommentStatsUpdateInput";

export class CommentStatsControllerBase {
  constructor(protected readonly service: CommentStatsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CommentStats })
  async createCommentStats(
    @common.Body() data: CommentStatsCreateInput
  ): Promise<CommentStats> {
    return await this.service.createCommentStats({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CommentStats] })
  @ApiNestedQuery(CommentStatsFindManyArgs)
  async commentStatsItems(
    @common.Req() request: Request
  ): Promise<CommentStats[]> {
    const args = plainToClass(CommentStatsFindManyArgs, request.query);
    return this.service.commentStatsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CommentStats })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async commentStats(
    @common.Param() params: CommentStatsWhereUniqueInput
  ): Promise<CommentStats | null> {
    const result = await this.service.commentStats({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CommentStats })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommentStats(
    @common.Param() params: CommentStatsWhereUniqueInput,
    @common.Body() data: CommentStatsUpdateInput
  ): Promise<CommentStats | null> {
    try {
      return await this.service.updateCommentStats({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CommentStats })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommentStats(
    @common.Param() params: CommentStatsWhereUniqueInput
  ): Promise<CommentStats | null> {
    try {
      return await this.service.deleteCommentStats({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
