/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CommentStats } from "./CommentStats";
import { CommentStatsCountArgs } from "./CommentStatsCountArgs";
import { CommentStatsFindManyArgs } from "./CommentStatsFindManyArgs";
import { CommentStatsFindUniqueArgs } from "./CommentStatsFindUniqueArgs";
import { DeleteCommentStatsArgs } from "./DeleteCommentStatsArgs";
import { CommentStatsService } from "../commentStats.service";
@graphql.Resolver(() => CommentStats)
export class CommentStatsResolverBase {
  constructor(protected readonly service: CommentStatsService) {}

  async _commentStatsItemsMeta(
    @graphql.Args() args: CommentStatsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CommentStats])
  async commentStatsItems(
    @graphql.Args() args: CommentStatsFindManyArgs
  ): Promise<CommentStats[]> {
    return this.service.commentStatsItems(args);
  }

  @graphql.Query(() => CommentStats, { nullable: true })
  async commentStats(
    @graphql.Args() args: CommentStatsFindUniqueArgs
  ): Promise<CommentStats | null> {
    const result = await this.service.commentStats(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CommentStats)
  async deleteCommentStats(
    @graphql.Args() args: DeleteCommentStatsArgs
  ): Promise<CommentStats | null> {
    try {
      return await this.service.deleteCommentStats(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
